// Code generated by go-bindata.
// sources:
// asset/index.html
// asset/static/colourl.css
// DO NOT EDIT!

package http

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x96\xd1\x6f\x9b\x3e\x10\xc7\xdf\xfb\x57\xdc\x0f\xf5\xb1\x60\x45\xbf\x97\xb5\x02\xa4\xa9\xdd\xd6\x4d\x9b\x16\xad\xe9\xa6\x3d\x55\x06\x2e\x60\xd5\xd8\xcc\x36\x21\x11\xe2\x7f\x9f\xc1\x24\x4d\xb3\xa4\xea\xaa\x74\xbc\xf8\x82\xcf\x5f\x7f\xce\x77\x39\x13\xfe\x77\xf5\xf5\x72\xf6\x73\xfa\x0e\x0a\x53\xf2\xf8\x24\xec\x07\xe0\x54\xe4\x91\x87\xc2\x83\x65\xc9\x85\x8e\xbc\xc2\x98\xea\x82\x90\xa6\x69\x82\xe6\xff\x40\xaa\x9c\x4c\xce\xcf\xcf\x49\xef\xec\xf5\x8b\x90\x66\xf1\x09\xd8\x27\x2c\xd1\x50\x48\x0b\xaa\x34\x9a\xc8\xbb\x9d\xbd\xf7\xdf\x78\xdb\x53\x82\x96\x18\x79\x0b\x86\x4d\x25\x95\xf1\x20\x95\xc2\xa0\xb0\xae\x0d\xcb\x4c\x11\x65\xb8\x60\x29\xfa\xc3\x8f\x33\x60\x82\x19\x46\xb9\xaf\x53\xca\x31\x9a\xac\x85\x0c\x33\x1c\xe3\x54\x72\x59\x2b\x0e\xd7\xb3\xd9\x14\xde\x4e\x3f\x86\xc4\xbd\x77\x3e\x9c\x89\x7b\x50\xc8\x23\x4f\x9b\x15\x47\x5d\x20\xda\xdd\x0a\x85\xf3\xfe\x0d\x35\x2c\x25\xa3\x40\x90\x6a\xed\x11\x1b\x05\x71\x61\x84\x89\xcc\x56\x76\xc8\xd8\x02\x52\x4e\xb5\x0d\x3f\xb5\x84\xa8\xd6\xdb\x6f\x4d\xe4\x8a\x65\x77\x77\x4a\x36\xb0\xb1\x7c\x9f\xe7\xa3\xe7\x7e\x6f\x66\xb0\x1c\xc2\xa6\x4c\x6c\x44\x37\xee\xc5\x64\x77\xd3\x90\x8e\xd8\x7d\x12\xb4\xcd\x42\xce\x4c\x51\x27\x41\x2a\x4b\x22\x64\x5a\x68\xb9\x8e\xc4\x8b\x2f\x9d\x11\x12\x1a\xdb\x70\x26\x3b\xda\x73\xa9\x4a\xb0\x59\x28\x64\x66\x61\xec\x79\x3c\x9e\xdf\xc5\x9d\x33\xe4\x99\x9f\x2b\x59\x57\x7b\x3c\xdd\x29\xd3\x04\x79\x7c\xfb\xed\x73\x48\x9c\xb9\xdf\x8d\x89\xaa\x36\x60\x56\x95\x4d\xbd\xc1\xa5\x4d\x84\x2b\x83\x9e\x19\x16\x94\xd7\xd6\x6e\xdb\xc0\xea\x74\x5d\x9f\x8a\x3f\x04\x88\xc5\x8a\x4f\x8e\x43\xfb\xa3\xaf\xad\xe7\xf3\x8a\xba\x4c\x6c\x1a\x46\xe2\x66\x9b\xf7\x93\x4c\x82\x41\xed\x1f\x50\x5f\x23\xcb\x0b\xf3\x52\xec\x62\x17\xdb\xc9\x3d\xc9\x7d\x14\xec\x2f\x74\x09\x7d\x75\x2a\xfd\x52\xf4\x92\x2e\x77\xe1\xad\xe8\xeb\x93\xdf\xf4\x6d\xe3\x69\x68\x8d\x1c\x53\x33\x72\x0e\x6d\xe6\x80\x64\xff\xb4\xad\xb2\x5d\x15\xe1\xf4\x1e\x57\x67\x70\x3a\x44\x04\x17\x11\x04\x53\xdb\x07\xec\x1f\x5d\x77\xdd\xc1\xb5\xa1\xac\x0c\x93\xa2\x6d\xd9\x1c\xf0\xd7\x20\x01\xa7\xc1\x40\x08\x5d\x07\x8e\x03\xb3\xb6\x45\x91\x75\x5d\xdc\xb6\xbd\x47\xd7\x85\xc4\xad\x7b\x0a\x6a\x58\xb1\x3f\x3c\xe2\x74\x5f\xf7\x98\x9f\x5f\x16\xba\x4e\x4a\x66\x36\xb5\x70\xa5\x68\x03\x37\xdf\x3f\x78\xeb\x2d\x93\xda\x18\x29\xfc\x4a\xb1\x92\xaa\xd5\xbe\xde\x76\x4c\xec\x75\x53\xb6\x25\x69\x21\x5c\xe7\x8a\xad\x05\x43\x33\xa4\x7f\x11\x97\x6b\x88\x0f\x15\xfe\x20\xf7\x9c\x08\x42\xd2\x77\xf5\xad\xfb\xe6\xb1\xcb\xa1\xeb\x67\xfb\x42\x7b\xa0\x2a\x73\xd0\x2a\x3d\x44\xb1\x25\x3d\x9a\x9b\x61\xbc\x32\x89\xfb\x88\xf8\x1d\x00\x00\xff\xff\xe9\x71\x3e\x51\x55\x08\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 2133, mode: os.FileMode(436), modTime: time.Unix(1464447859, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticColourlCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x94\x5d\x6f\xd3\x3c\x14\xc7\xef\xfb\x29\xac\x4d\xd3\x9e\x67\x6a\x9a\x74\x6d\x57\x96\x0a\x09\x04\x5c\x20\x98\xb8\x98\xe0\x02\x84\x26\x27\x3e\x49\xbd\x39\x76\xe4\x38\xac\x05\xf1\xdd\x39\xce\xab\x9b\xa5\x13\x17\x6c\xd2\xb4\x9c\x63\xff\xcf\xdb\xef\x38\x52\x6c\x4f\x7e\x4d\x08\xfe\x24\x4a\x1a\x2f\xa1\x19\x17\xfb\x90\x9c\x7f\xca\x41\x92\x5b\x2a\x8b\xf3\x29\x39\x7f\x0b\xf7\xf4\x4b\xd9\x7d\xde\x42\xaa\x80\x7c\x7e\x8f\xff\x17\x68\xf2\x0a\xd0\x3c\xd9\x54\x22\xb1\x12\x4a\x87\xe4\x74\xb1\x58\xd4\x86\x9c\x32\xc6\x65\x1a\x92\x80\xcc\x35\x64\x9b\xc9\xef\xc9\x84\x36\x11\xdb\xc3\xc1\xbb\xd5\xeb\xeb\x65\xed\x0a\xb7\xea\x07\xe8\xe1\x01\x58\xaf\xa3\xfa\xc0\x2c\x2a\x8d\x51\xb2\x3e\x36\x25\x87\x5f\x5c\xe6\xa5\xf9\x66\xf6\x39\xbc\x3c\xa9\x3d\x27\xdf\xc7\x7c\x1a\x0a\x30\xe3\xae\xa2\x8c\x32\xde\xf9\x9a\x3c\x22\x1a\x3f\xa4\x5a\x95\x92\x79\x23\x29\xf1\x2c\x6d\xce\x65\x74\xe7\x3d\x72\x66\xb6\x21\x99\x07\xc1\x59\x9d\x70\x8c\x7d\xa5\x5c\x76\x62\xcd\x81\xeb\xd5\xd9\x66\x78\xe9\x2a\x08\xf2\x5d\x6b\xd5\x29\x97\x21\xa1\xa5\x51\xb5\x25\x11\x8a\x9a\x90\x08\x48\x4c\x23\x0c\xd2\x74\xaa\x06\x76\xc6\xa3\x82\xa7\x78\xa7\x76\x54\x87\x72\x0d\x53\x6c\x23\x83\xd1\x21\x3b\x73\x25\x37\x4a\x2a\x3b\xdc\x8f\x3c\x02\x4d\x0d\x57\xb2\x33\xbd\x51\xb2\x50\x82\xda\xd9\x67\x68\x2a\x72\x1a\x83\x3b\x8c\x76\x0c\xe3\x03\x18\x6d\xfd\x78\xd3\x9f\x69\x77\x83\x48\xe5\x56\x9a\x01\x1a\x03\xf7\xd3\xd3\x94\xf1\xb2\x40\xeb\x6c\x51\x71\xe6\xf2\x93\x24\x2d\x9e\xa5\x2e\xac\x25\x57\xbc\x6e\x91\x35\x32\x5e\xe4\x82\x62\x3f\xb8\x14\x38\x27\x2f\x12\x2a\x7e\xd8\xf4\xed\x2a\xf8\x4f\xc0\x81\xce\x96\x9d\x6e\x0f\xf5\x6c\x09\x19\xfe\x5d\x35\x64\xfb\x17\x5b\x63\xf2\xd0\xf7\x6d\xcb\x71\x83\x66\x5c\xf9\x46\xe9\x08\x24\xa6\x62\xaf\xf8\x68\xf4\x21\xfb\x70\xf3\x75\x77\xe1\x4f\x12\xa5\x33\x32\x4b\x38\x08\xe6\xd9\x82\xf3\xa6\x01\x5d\x46\x89\x80\x01\x0f\x81\x5d\xa4\xcb\x7c\xd7\x56\xef\xd0\xb3\xaa\xe9\xc1\x34\x9e\xea\x0a\x1a\x81\x68\x19\x40\x51\xac\x67\xf3\x84\x1b\xcd\xd3\xad\x19\x86\x9b\xcf\x2e\xb5\xad\xb1\x0d\xe8\x5f\x74\xd5\xd7\x69\x60\x1d\xd6\x5e\x69\xe0\x53\x20\x92\x03\x00\x9f\xa6\x52\x0d\x7e\x3a\xe2\xc0\xbb\x10\x9b\x83\x24\x17\xf5\x82\x55\x37\x1a\xff\xb4\x4a\x99\x6a\x68\x5f\x91\x2e\x1d\x67\x40\xee\xdc\x3a\x63\xcb\x0d\xb2\xcc\x19\x99\x63\xf2\xa7\x71\x1c\x6f\x06\xc8\xb9\xb8\x44\x6a\x67\x55\x2a\xf5\x06\x33\x34\x8d\x62\xd7\x50\x87\xd9\xbe\xca\x80\x71\x4a\xfe\x73\x26\xb3\x7c\x81\x93\xf9\xbf\xc9\xf7\xa0\x9a\xc6\xe6\xbc\x0b\xf5\xc3\x61\x0d\xa8\x55\xd7\x32\x0e\xc9\x11\x50\xda\xe6\x79\x8c\x6b\x0c\x80\x7b\x1c\xda\x3d\x28\x33\xd9\xfb\x5d\x98\xae\x7a\x96\x8e\x06\x74\xe9\x19\x3c\xea\x01\x59\xf5\x02\xae\xf6\x3c\xb0\xf6\x9e\x9b\x21\x23\x55\x8e\x05\x0e\xd2\xb4\xc1\xed\x83\x92\x6a\xce\xee\xee\xb4\x7a\x3c\xbe\x09\xcf\x15\x77\x5f\x16\x86\x27\x7b\xcf\xbe\xb9\xc8\x60\x4f\x62\x1f\x9d\x1b\xc8\x8a\x03\x44\x9b\xa0\xd6\x31\xb6\x21\x5d\xb1\x76\xed\xda\x1d\x18\x61\x09\xd6\xf6\xd7\xae\x43\x0f\x01\x15\x82\x50\xc9\x10\x06\x2e\x47\x61\xe8\x0b\xf6\xbc\x22\x73\x5a\x3c\xac\x12\x4f\x38\x7d\x7a\x46\x7e\x7d\x79\x44\x3e\x63\xff\x42\xfe\xfa\xea\x88\xbc\x48\xff\x52\xfe\x4f\x00\x00\x00\xff\xff\x41\xe6\x85\xac\x73\x08\x00\x00")

func staticColourlCssBytes() ([]byte, error) {
	return bindataRead(
		_staticColourlCss,
		"static/colourl.css",
	)
}

func staticColourlCss() (*asset, error) {
	bytes, err := staticColourlCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/colourl.css", size: 2163, mode: os.FileMode(436), modTime: time.Unix(1464447801, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
	"static/colourl.css": staticColourlCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"static": &bintree{nil, map[string]*bintree{
		"colourl.css": &bintree{staticColourlCss, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

