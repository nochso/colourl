// Code generated by go-bindata.
// sources:
// asset/index.html
// asset/static/colourl.css
// DO NOT EDIT!

package http

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x96\x51\x6f\xe2\x38\x14\x85\xdf\xf9\x15\x77\xad\x3e\x96\x58\x68\x5f\xb6\x55\x12\x69\xd5\xee\xb6\x33\x6a\x35\xa8\xd0\x8e\xe6\xa9\x32\xc9\x25\xb1\xea\xd8\x8c\x7d\x43\x40\x51\xfe\xfb\xc8\x49\xa0\x0c\x03\x55\xa7\x6a\x87\x97\x98\xe4\xf8\xf8\xbb\xf1\xe5\x98\xf0\xaf\xcb\x2f\x17\xd3\x6f\xe3\xff\x20\xa7\x42\xc5\x83\xd0\x5f\x40\x09\x9d\x45\x0c\x35\x83\x55\xa1\xb4\x8b\x58\x4e\xb4\x38\xe7\xbc\xaa\xaa\xa0\xfa\x3b\x30\x36\xe3\xa3\xb3\xb3\x33\xee\xc5\xcc\x4f\x42\x91\xc6\x03\x00\x80\xb0\x40\x12\x90\xe4\xc2\x3a\xa4\x88\xdd\x4f\xff\x1f\xfe\xc3\x76\x1f\x69\x51\x60\xc4\x96\x12\xab\x85\xb1\xc4\x20\x31\x9a\x50\x53\xc4\x2a\x99\x52\x1e\xa5\xb8\x94\x09\x0e\xdb\x2f\xa7\x20\xb5\x24\x29\xd4\xd0\x25\x42\x61\x34\xda\x18\x91\x24\x85\x71\x62\x94\x29\xad\x82\xeb\xe9\x74\x0c\xff\x8e\x3f\x85\xbc\xbb\xdf\x69\x94\xd4\x4f\x60\x51\x45\xcc\xd1\x5a\xa1\xcb\x11\x89\x41\x6e\x71\xee\xef\x08\x92\x09\xef\x0d\x82\xc4\x39\xc6\xe3\x41\xc8\xbb\x32\xc2\x99\x49\xd7\xf1\x20\x4c\xe5\x12\x12\x25\x9c\x8b\x58\x82\x9a\xd0\x6e\x96\xdf\x79\x90\x59\x99\x3e\x3e\x5a\x53\xc1\x76\x34\x1c\xaa\xac\x57\x1e\x56\x4b\xc2\xa2\x2d\x5b\x48\xbd\x35\xdd\xca\xf3\xd1\xfe\xa2\xa1\xe8\xb1\xfd\x26\xb8\x73\xce\x33\x49\x79\x39\x0b\x12\x53\x70\x6d\x92\xdc\x99\x4d\x25\x2c\xbe\xe8\x06\x21\x17\x71\xc8\xf3\xd1\x9e\xf7\xdc\xd8\x02\x0a\xa4\xdc\xa4\x11\xcb\x90\xf6\xd6\xde\xc7\x9d\x4b\x54\xe9\x30\xb3\xa6\x5c\x1c\x50\x76\x6f\x59\xcc\x50\xc5\xf7\x77\x37\x21\xef\x86\x87\x65\x52\x2f\x4a\x02\x5a\x2f\x30\x62\x84\x2b\x62\x7d\x1b\x78\x66\x58\x0a\x55\x62\xc4\xea\x3a\xb8\xbf\xbb\x69\x1a\xbf\x15\xbf\x18\xf0\x54\x2e\xe3\xc1\xfb\xd0\x7e\xf5\xbd\xf5\x7a\x5e\x5d\x16\x33\xb4\x1b\xe2\x6a\x97\xf7\xb3\x99\x05\xad\xdb\x1f\xa0\xbe\x46\x99\xe5\xf4\x56\xec\x7c\x1f\xbb\xb3\x7b\x91\xfb\x5d\xb0\x6f\xc5\x0a\x7c\x77\x5a\xf7\x56\xf4\x42\xac\xf6\xe1\x6f\xc5\xea\xe3\xc9\x27\x3e\x36\x5e\x86\x76\xa8\x30\xa1\x9e\xb3\x8d\x99\x23\x96\xfe\x53\xd7\x56\xe8\x0c\xe1\xe4\x09\xd7\xa7\x70\xd2\x56\x04\xe7\x11\x04\x63\x21\xfd\x0f\xdd\x35\xcd\xd1\xb9\xa1\x59\x90\x34\xba\xae\xe5\x1c\xf0\x7b\x6b\x01\x27\x41\x4b\x08\x4d\x03\x1d\x07\xa6\x75\x8d\x3a\x6d\x9a\xb8\xae\xbd\xa2\x69\x42\xde\xcd\x7b\x09\xaa\x9d\x71\xb8\x3c\xde\xf9\x7e\xec\x6b\x7e\x7d\x5b\xb8\x72\x56\x48\xda\xf6\xc2\xa5\x15\x15\x4c\x1e\xae\xd8\x66\xc9\x59\x49\x64\xf4\x70\x61\x65\x21\xec\xfa\x50\xb6\xbd\x27\xf6\x26\x94\xeb\x3a\x98\x3c\x5c\x75\xc9\x15\x4f\x1e\xae\xa0\x0d\x43\xf1\x1b\x75\x75\x81\xf8\xdc\xe1\xcf\x76\xaf\xa9\x20\xe4\x3e\xd5\x77\xce\x9b\x9f\x25\xc7\x8e\x9f\xdd\x03\xed\x99\xaa\xc8\xc0\xd9\xe4\x18\xc5\x8e\x75\x3f\xdc\x5e\xfa\x23\x93\x77\x7f\x22\x7e\x04\x00\x00\xff\xff\xe9\x71\x3e\x51\x55\x08\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 2133, mode: os.FileMode(436), modTime: time.Unix(1465254045, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticColourlCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x4d\x6f\xf3\x44\x10\xc7\xef\xfe\x14\xa3\xe7\x51\x95\x12\xc5\x2f\x69\x92\x86\x3a\x42\x02\x01\x07\x04\x15\x87\x0a\x0e\x20\x54\xad\xbd\x63\x67\xdb\xf5\xee\x6a\x77\x4d\x1d\x50\xbe\x3b\x5a\xbf\xc7\x75\x2a\x0e\x8f\x72\xca\xcc\xf8\x3f\x6f\xbf\xd9\x44\xd2\x13\xfc\xeb\x01\x00\x64\x52\x58\x3f\x23\x05\xe3\xa7\x18\x16\xbf\x2a\x14\xf0\x44\x84\x59\xac\x60\xf1\x03\xbe\x90\xdf\xcb\xfe\xef\x13\xe6\x12\xe1\xb7\x9f\x16\x2b\x30\x44\x18\xdf\xa0\x66\xd9\xa1\x16\x49\x25\x97\x3a\x86\xcf\x9b\xcd\xa6\x31\x28\x42\x29\x13\x79\x0c\x11\xac\x35\x16\x07\xef\xec\x79\xa4\xcd\xd8\x05\x47\x3f\xee\xbe\x7b\xd8\x36\xae\xf8\x28\xff\x46\x3d\x0d\xc0\xfd\x3e\x69\x02\x82\xa4\xb4\x56\x8a\x26\x6c\x05\x97\xff\x98\x50\xa5\xfd\xd3\x9e\x14\x7e\xf3\xa9\xf1\x7c\xfa\x6b\xce\xa7\xd1\xa0\x9d\x77\x99\x32\x29\x58\xef\x6b\xeb\x48\x48\xfa\x9a\x6b\x59\x0a\xea\xcf\x94\xc4\x8a\xbc\x8d\x2b\x48\xe5\xbf\x31\x6a\x8f\x31\xac\xa3\xe8\xa6\x29\x38\x95\xc2\x12\x26\x7a\xb1\x36\xe0\x61\x77\x73\x98\x7e\x74\x1f\x45\xaa\xea\xac\x3a\x67\x22\x06\x52\x5a\xd9\x58\x32\x2e\x89\x8d\x81\x63\x66\x5b\x61\x14\xb6\x57\xb5\x58\x59\x9f\x70\x96\x8b\x18\x1a\x47\x1d\xa4\x34\xae\x20\x95\x14\x67\x97\x3c\xda\x2b\x3c\x4a\x21\xdd\x72\x7f\x61\x09\x6a\x62\x99\x14\xbd\xe9\x7b\x29\x8c\xe4\xc4\xed\xbe\x90\x42\x1a\x45\x52\x1c\x2f\xa3\x5b\xc3\xfc\x02\x66\x47\x3f\x3f\xf4\x0f\xc6\xdd\x22\x52\xbb\xa5\xa6\xa8\x63\x88\xc6\x7f\x7d\x4d\x28\x2b\x4d\x0c\x51\xb0\xa9\x39\x1b\xf3\x93\x65\x1d\x9e\xa5\x36\xce\xa2\x24\x6b\x46\xe4\x8c\x94\x19\xc5\xc9\x29\x06\x26\x38\x13\xe8\x27\x5c\xa6\xaf\x87\x61\x5c\x86\xfd\x83\x31\xac\x83\x6d\xaf\x3b\x40\x1d\x6c\xb1\x80\x28\xd8\xb5\x64\x87\xcb\xa3\xb5\x2a\x0e\x43\x37\x72\x85\x22\x60\x32\xb4\x52\x27\x28\x52\xc9\xdd\x27\xa1\x42\x11\x62\xf1\xf3\xe3\x1f\xd5\x32\xf4\x32\xa9\x0b\x08\x32\x86\x9c\xfa\xae\x61\xd5\x0e\xa0\xaf\x28\xe3\x38\xe1\x21\x72\x87\x74\xa7\xaa\xae\xfb\x11\x3d\xbb\x86\x9e\xb3\x37\xa3\xcb\x49\x82\xbc\x63\x80\x63\x15\xc3\xfa\xf0\x8e\x1b\xcd\xf2\xa3\x9d\xa6\x5b\x07\x77\xda\xf5\xd8\x25\x0c\x97\x7d\xf7\x4d\x19\xcb\xb0\xb6\xd7\x1a\xbe\x41\x9e\x5d\x00\xf8\xbe\x94\x7a\xf1\xab\x19\x87\x41\x8e\xa9\xbd\x28\x72\xd3\x1c\x58\xfd\x45\xeb\x5f\xd5\x25\x13\x8d\xdd\x2b\xd2\x97\x33\x5a\xd0\x78\x6f\xbd\xb1\xe3\xc6\x48\xce\x28\xac\x55\x05\x9f\xd3\x34\x3d\x4c\x90\x1b\xe3\x92\xc8\xca\xa9\xd4\xea\x2d\x66\x89\xac\x66\xb1\x6b\xa9\x3b\x7b\xde\xb7\x05\x52\x46\xe0\x76\xb4\x99\xed\xd7\x91\xaa\xbe\x6a\xeb\xbd\xe8\xa6\xb5\x8d\xde\x85\xe6\xe1\x70\x86\xb3\xd7\xf6\x32\x0f\xc9\x15\x50\xba\xe1\xf9\x94\x69\x4c\xdd\x1d\xc7\xee\x0e\xca\x42\x0c\xfe\x31\x4c\xf7\x03\x4b\x57\x13\x8e\xe9\x99\x3c\xea\x11\xec\x06\x81\xb1\xf6\x3a\x72\xf6\x81\x9b\x29\x23\x75\x8d\xc6\x12\x6d\xbb\xe4\xee\x41\xc9\x35\xa3\xcf\xcf\x5a\xbe\x5d\xbf\x84\x8f\x9a\x7b\x29\x8d\x65\xd9\xc9\x77\x6f\x2e\x0a\x3b\x90\x38\x64\x67\x16\x0b\x73\x81\x68\x9b\xd4\x39\xe6\x2e\xa4\x6f\xd6\x9d\x5d\x77\x03\x33\x2c\xe1\xde\xfd\xdc\x39\x0c\x10\x10\xce\x81\x08\x0a\xb7\x05\x13\xb3\x30\x0c\x0d\xfb\xbe\x29\x46\x23\x9e\x76\xa9\xe5\xdb\x68\x4e\x1f\xc8\xef\xef\xae\xc8\x17\xf4\x4b\xc8\x3f\xdc\x5f\x91\xe7\xf9\xff\x94\xff\x2f\x00\x00\xff\xff\x41\xe6\x85\xac\x73\x08\x00\x00")

func staticColourlCssBytes() ([]byte, error) {
	return bindataRead(
		_staticColourlCss,
		"static/colourl.css",
	)
}

func staticColourlCss() (*asset, error) {
	bytes, err := staticColourlCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/colourl.css", size: 2163, mode: os.FileMode(436), modTime: time.Unix(1465254063, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html":         indexHtml,
	"static/colourl.css": staticColourlCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": {indexHtml, map[string]*bintree{}},
	"static": {nil, map[string]*bintree{
		"colourl.css": {staticColourlCss, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
