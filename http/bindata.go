// Code generated by go-bindata.
// sources:
// asset/index.html
// DO NOT EDIT!

package http

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x53\xc1\x8e\xd3\x30\x10\xbd\xf7\x2b\x06\x5f\x7a\xa1\xca\x72\x40\x42\x5d\x27\x12\x62\x41\xbb\x12\x68\x2b\xda\x0a\x71\x9c\x24\x4e\x62\xe1\xd8\x91\x3d\x69\x1b\x21\xfe\x1d\x3b\x49\xbb\x6c\x1a\xa1\xce\xc5\x63\xcf\xcc\x1b\xfb\xcd\x33\x7f\xf3\xf0\xfc\x69\xf7\x73\xf3\x19\x2a\xaa\x55\xb2\xe0\x61\x01\x85\xba\x8c\x99\xd0\x2c\x1c\x08\xcc\x93\x05\x78\xe3\xb5\x20\x84\xac\x42\xeb\x04\xc5\x6c\xbf\xfb\xb2\xfa\xc0\xc6\x10\x49\x52\x22\xc9\x8c\x32\xad\x55\xf0\xb8\xdb\x6d\xe0\xe3\xe6\x89\x47\xc3\xf9\x90\xe3\xa8\x3b\xfb\xc1\x52\x93\x77\xf0\xfb\xb2\x0d\x56\x18\x4d\xab\x02\x6b\xa9\xba\x35\x2c\x9f\x1b\xa1\x61\x8b\xda\x2d\xdf\xc2\x72\x2b\x4a\x23\x60\xff\xe4\x7d\xe7\x8f\x56\x4e\x58\x59\xdc\x5f\xaa\xff\x5c\x3c\xa9\x9b\x96\x7c\x92\x50\x22\xa3\x09\x7e\x2e\x5d\xa3\xd0\x63\xa7\xca\x64\xbf\xee\x5f\xf7\x56\x06\x69\x0d\x4a\x14\x34\x07\xab\x30\x15\x6a\x7a\xdd\xb9\x92\x60\x99\x12\x68\x7d\x17\x43\xd5\xeb\xc0\x51\xe6\x54\xad\xe1\xdd\xdd\x5d\x73\x9a\x76\xe1\xd1\x48\x10\x8f\x06\xce\x79\x60\xc8\x2f\xb9\x3c\x40\x1f\x8a\xd9\x58\xff\xbe\xaf\x87\x1a\x6d\x29\xf5\x1a\xb0\x25\x73\x1e\x44\x61\x6c\x0d\x7e\x50\x95\xc9\x63\x56\x0a\x62\x80\x19\x49\xa3\x63\xe6\x0e\x25\x7b\x61\x9f\xf7\x0f\x4a\xf6\xdf\xbf\xf2\x68\x70\x5f\x42\x3d\x85\x40\x5d\xe3\x3b\x92\x38\x79\x0c\x8d\xb5\xf7\xfd\x68\x59\x94\x2c\xa6\x18\x3f\xc2\xa5\x6e\x47\x39\xce\x61\x3c\x0a\x59\x56\x74\x3b\x48\x35\x07\xf2\x0d\x4f\x10\x24\x68\xdd\xed\x40\x35\x9e\xe6\xa0\xb6\x81\xef\x6b\x94\x51\x55\x43\x69\x3f\x93\x7f\x28\xed\x33\x4c\x13\xd8\x4e\x52\xd4\x39\x8f\xc6\xcd\x6c\x46\x26\x6d\x16\x5a\x4c\x73\xbc\x0c\xfa\x26\xd7\x77\xfa\xff\xa3\x5c\x9b\xd6\xd2\x3f\xeb\x80\xaa\xf5\xdb\x07\x8b\xc7\xb3\x26\xa2\x20\x8a\xa0\x2b\xaf\xa4\xb0\x8c\xba\x8a\x86\x2f\xff\x37\x00\x00\xff\xff\xef\x3a\x93\xbd\x03\x04\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 1027, mode: os.FileMode(436), modTime: time.Unix(1464292830, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": {indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
